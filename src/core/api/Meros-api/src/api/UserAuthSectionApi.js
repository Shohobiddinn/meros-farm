/*
 * Meros web app
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.62
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';

/**
* UserAuthSection service.
* @module api/UserAuthSectionApi
* @version 0.1.0
*/
export default class UserAuthSectionApi {

    /**
    * Constructs a new UserAuthSectionApi. 
    * @alias module:api/UserAuthSectionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the loginForAccessTokenAuthTokenPost operation.
     * @callback moduleapi/UserAuthSectionApi~loginForAccessTokenAuthTokenPostCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login For Access Token
     * @param {String} grantType 
     * @param {String} username 
     * @param {String} password 
     * @param {String} scope 
     * @param {String} clientId 
     * @param {String} clientSecret 
     * @param {module:api/UserAuthSectionApi~loginForAccessTokenAuthTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    loginForAccessTokenAuthTokenPost(grantType, username, password, scope, clientId, clientSecret, callback) {
      
      let postBody = null;
      // verify the required parameter 'grantType' is set
      if (grantType === undefined || grantType === null) {
        throw new Error("Missing the required parameter 'grantType' when calling loginForAccessTokenAuthTokenPost");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling loginForAccessTokenAuthTokenPost");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling loginForAccessTokenAuthTokenPost");
      }
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling loginForAccessTokenAuthTokenPost");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling loginForAccessTokenAuthTokenPost");
      }
      // verify the required parameter 'clientSecret' is set
      if (clientSecret === undefined || clientSecret === null) {
        throw new Error("Missing the required parameter 'clientSecret' when calling loginForAccessTokenAuthTokenPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'grant_type': grantType,'username': username,'password': password,'scope': scope,'client_id': clientId,'client_secret': clientSecret
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/auth/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}